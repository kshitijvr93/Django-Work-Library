# Generated by Django 2.0.2 on 2018-04-07 21:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tile_id', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, help_text='Location name, eg LC_WQ1, LC_WQ2. Shorter for reports.', max_length=200, null=True, unique=True)),
                ('alias1', models.CharField(blank=True, help_text='Possibly other name designation of the location', max_length=200, null=True, unique=True)),
                ('alias2', models.CharField(blank=True, help_text='Possibly other name designation of the location', max_length=200, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about the location', null=True)),
            ],
            options={
                'db_table': 'location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('manufacturer', models.CharField(blank=True, max_length=150, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=150, null=True)),
                ('model_type', models.CharField(blank=True, max_length=150, null=True)),
                ('manufacture_date', models.DateTimeField(blank=True, null=True)),
                ('battery_expiration_date', models.DateField(blank=True, null=True)),
                ('observation_period_unit', models.CharField(blank=True, help_text='Examples: Minute, Hour, or Day, etc.', max_length=50, null=True)),
                ('observation_period_unit_count', models.CharField(blank=True, help_text='The count of observation_period units in one period.', max_length=50, null=True)),
                ('status_observation', models.CharField(blank=True, max_length=150, null=True)),
                ('status_observation_date', models.DateTimeField(blank=True, null=True)),
                ('meters_above_seafloor', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, help_text='Reserved for the most recent deployed location of this sensor. Maintaining this automatically by some method when table sensor_deployment is updated may be convenient.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Location')),
                ('project', models.ForeignKey(blank=True, help_text='Owner project of this sensor', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Project')),
            ],
            options={
                'db_table': 'sensor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SensorDeploy',
            fields=[
                ('sensor_deploy_id', models.AutoField(primary_key=True, serialize=False)),
                ('deploy_datetime', models.DateTimeField()),
                ('notes', models.TextField(blank=True, help_text='Notes about the deployment', null=True)),
                ('testint', models.IntegerField()),
                ('location', models.ForeignKey(help_text='Location id where the sensor is deployed as of the deploy date-time, where special location 0 means not in service', on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Location')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Sensor')),
            ],
            options={
                'db_table': 'sensor_deploy',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WaterObservation',
            fields=[
                ('water_observation_id', models.AutoField(primary_key=True, serialize=False)),
                ('observation_datetime', models.DateTimeField(blank=True, null=True)),
                ('in_service', models.IntegerField(blank=True, null=True)),
                ('phosphorus_ug', models.FloatField(blank=True, null=True)),
                ('nitrogen_ug', models.FloatField(blank=True, null=True)),
                ('chlorophyll_ug', models.FloatField(blank=True, null=True)),
                ('secchi_ft', models.FloatField(blank=True, null=True)),
                ('color_pt_co', models.FloatField(blank=True, null=True)),
                ('specific_conductance_us_cm_25c', models.FloatField(blank=True, null=True)),
                ('specific_conductance_ms_cm_25c', models.FloatField(blank=True, null=True)),
                ('salinity_g_kg', models.FloatField(blank=True, null=True)),
                ('salinity_psu', models.FloatField(blank=True, null=True)),
                ('temperature_c', models.FloatField(blank=True, null=True)),
                ('pressure_psi', models.FloatField(blank=True, null=True)),
                ('pressure_cm', models.FloatField(blank=True, null=True)),
                ('conductivity_ms_cm', models.FloatField(blank=True, db_column='conductivity_mS_cm', null=True)),
                ('sound_velocity_m_sec', models.FloatField(blank=True, null=True)),
                ('note', models.CharField(blank=True, help_text='Short note on observation, 32 characters or less.', max_length=32, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Location')),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Sensor')),
            ],
            options={
                'db_table': 'water_observation',
                'managed': True,
            },
        ),
        migrations.AlterUniqueTogether(
            name='waterobservation',
            unique_together={('sensor', 'observation_datetime')},
        ),
    ]
