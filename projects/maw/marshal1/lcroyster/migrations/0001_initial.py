# Generated by Django 2.0.3 on 2018-04-11 14:53

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tile_id', models.IntegerField(blank=True, default=None, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, help_text='Location name, eg LCR Buoy One.', max_length=200, null=True, unique=True)),
                ('alias1', models.CharField(blank=True, help_text='Alternative name designation of the location', max_length=200, null=True, unique=True)),
                ('alias2', models.CharField(blank=True, default=None, help_text='Alternative name designation of the location', max_length=200, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about the location', max_length=2550, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_website_code', models.CharField(help_text='Short unique code for this project (up to 16 characters)', max_length=16, unique=True)),
                ('name', models.CharField(help_text='Long name for this project', max_length=255, unique=True)),
                ('uf_award_id', models.CharField(blank=True, help_text='This field should normally start AWD and followed by 5 digits.', max_length=200, null=True, unique=True)),
                ('sponsor_names', models.CharField(blank=True, max_length=200, null=True)),
                ('sponsors_award_id', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('contact_investigator', models.CharField(blank=True, max_length=255, null=True)),
                ('principal_investigators', models.TextField(blank=True, help_text='Usually this is a single investigator, but some sponsors like NSF allow multiple principal investigators', max_length=255, null=True)),
                ('co_principal_investigators', models.TextField(blank=True, max_length=200, null=True)),
                ('collaborators', models.TextField(blank=True, max_length=200, null=True)),
                ('award_start_date', models.DateField(blank=True, help_text='Notes about this project and related info free form.', null=True)),
                ('award_end_date', models.DateField(blank=True, help_text='Notes about this project and related info free form.', null=True)),
                ('responsible_unit', models.CharField(blank=True, max_length=200, null=True)),
                ('department_id', models.CharField(blank=True, max_length=200, null=True)),
                ('proposal_id', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about this project and related info in free form.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('serial_number', models.CharField(blank=True, help_text='For example: VNNNN for a vanEssen:diver sensor or simply NNNN for a Star-Oddi:CT sensor. For example, one vanEssen:Diver sensor serial number is V5602 and one Star-Oddi:CT serial number is 8814.', max_length=150, null=True)),
                ('range_low_mS_cm', models.FloatField(null=True)),
                ('range_high_mS_cm', models.FloatField(null=True)),
                ('manufacture_date', models.DateField(blank=True, null=True)),
                ('battery_expiration_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='More notes about the sensor', max_length=255, null=True)),
                ('project', models.ForeignKey(blank=True, help_text='Owner project of this sensor', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Project')),
            ],
            options={
                'ordering': ['sensor_type'],
            },
        ),
        migrations.CreateModel(
            name='SensorDeploy',
            fields=[
                ('sensor_deploy_id', models.AutoField(primary_key=True, serialize=False)),
                ('deploy_datetime', models.DateTimeField()),
                ('notes', models.TextField(blank=True, help_text='Notes about the deployment', max_length=255, null=True)),
                ('location', models.ForeignKey(help_text='Location id where the sensor is deployed as of the deploy date-time, where special location 0 means not in service', on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Location')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Sensor')),
            ],
        ),
        migrations.CreateModel(
            name='SensorService',
            fields=[
                ('sensor_service_id', models.AutoField(primary_key=True, serialize=False)),
                ('service_datetime', models.DateTimeField(help_text='Date time that sensor was perturbed at start of extraction.\nNOTE:If the next measurement time for this sensor will be missed, also add two rows in sensor_deploy. Add one row using this sensor_datetime and deploy to location 0, and another row for the time and location the sensor is put back in serivce.')),
                ('download_datetime', models.DateTimeField(help_text='Date time that sensor data was downloaded to laptop. \nNOTE: Is this time needed in addition to the service_datetime?')),
                ('copper_tape', models.BooleanField(help_text='ISSUE: is this (1) whether copper tape time was present for the sensor, or (2) is this whether this servicing added copper tape?')),
                ('color_tape', models.CharField(blank=True, help_text='ISSUE: Is this (1) the tape color found at start of service, or (2) the color of tape applied to this sensor during service?', max_length=150, null=True)),
                ('active', models.BooleanField(help_text='ISSUE: is this (1) whether sensor was found to be active when extracted or (2) whether it was set to be active when re-inserted at the end of this service? ')),
                ('measurements_downloaded', models.IntegerField(blank=True, null=True)),
                ('heavily_fouled', models.BooleanField(help_text='Y or N: Whether heavily fouled.')),
                ('battery_life_remaining_percent', models.IntegerField(blank=True, help_text='Enter an integer from 0 to 100.', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about the deployment\nISSUE: Dropped download_time, next_download,measurements_downloaded, project, site, lat, lon, manufacurer, type date_deployed, time_started, and redeployed because this is coverd by water_observations, service_datetime and sensor_deploy data.', max_length=255, null=True)),
                ('project', models.ForeignKey(help_text='ISSUE: Does only one project own a sensor for the lifetime of a sensor? If so, drop this project field from here. \nProject that owns/maintains the sensor.', on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Project')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Sensor')),
            ],
        ),
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('sensor_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('manufacturer', models.CharField(blank=True, help_text='For example: vanEssen or Star-Oddi.', max_length=150, null=True)),
                ('model_type', models.CharField(help_text='For example: vanEssen usually has type Diver, and Star-Oddi usually has type CT. ', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaterObservation',
            fields=[
                ('water_observation_id', models.AutoField(primary_key=True, serialize=False)),
                ('observation_datetime', models.DateTimeField(blank=True, null=True)),
                ('in_service', models.IntegerField(blank=True, null=True)),
                ('phosphorus_ug', models.FloatField(blank=True, null=True)),
                ('nitrogen_ug', models.FloatField(blank=True, null=True)),
                ('chlorophyll_ug', models.FloatField(blank=True, null=True)),
                ('secchi_ft', models.FloatField(blank=True, null=True)),
                ('color_pt_co', models.FloatField(blank=True, null=True)),
                ('specific_conductance_us_cm_25c', models.FloatField(blank=True, null=True)),
                ('specific_conductance_ms_cm_25c', models.FloatField(blank=True, null=True)),
                ('salinity_g_kg', models.FloatField(blank=True, null=True)),
                ('salinity_psu', models.FloatField(blank=True, null=True)),
                ('temperature_c', models.FloatField(blank=True, null=True)),
                ('pressure_psi', models.FloatField(blank=True, null=True)),
                ('pressure_cm', models.FloatField(blank=True, null=True)),
                ('conductivity_ms_cm', models.FloatField(blank=True, db_column='conductivity_mS_cm', null=True)),
                ('sound_velocity_m_sec', models.FloatField(blank=True, null=True)),
                ('note', models.CharField(blank=True, help_text='Short note on observation, 32 characters or less.', max_length=32, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Location')),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.Sensor')),
            ],
        ),
        migrations.AddField(
            model_name='sensor',
            name='sensor_type',
            field=models.ForeignKey(blank=True, help_text='This identifies the manufacturer and sensor type.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='lcroyster.SensorType'),
        ),
        migrations.AlterUniqueTogether(
            name='waterobservation',
            unique_together={('sensor', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('sensor_type', 'serial_number')},
        ),
    ]
